apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    ossrhUsername = ''
    ossrhPassword = ''
    sonatypeStagingProfileId = ''
    signingKeyId = ''
    signingPassword = ''
    signingKey = ''
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    secretPropsFile.withInputStream { stream ->
        p.load(stream)
    }
    p.each { name, value ->
        project.ext[name] = value
    }
} else {
    project.ext['ossrhUsername'] = System.getenv('OSSRH_USERNAME')
    project.ext['ossrhPassword'] = System.getenv('OSSRH_PASSWORD')
    project.ext['sonatypeStagingProfileId'] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    project.ext['signingKeyId'] = System.getenv('SIGNING_KEY_ID')
    project.ext['signingPassword'] = System.getenv('SIGNING_PASSWORD')
    project.ext['signingKey'] = System.getenv('SIGNING_KEY')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Publishing configuration
publishing {
    publications {
        release(MavenPublication) {
            groupId = project.PUBLISH_GROUP_ID
            artifactId = project.PUBLISH_ARTIFACT_ID
            version = project.PUBLISH_VERSION

            if (project.plugins.findPlugin("com.android.library")) {
                from components.release
            } else {
                from components.java
            }

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project.PROJECT_NAME
                description = project.PROJECT_DESCRIPTION
                url = project.PROJECT_URL

                licenses {
                    license {
                        name = project.LICENSE_NAME
                        url = project.LICENSE_URL
                    }
                }

                developers {
                    developer {
                        id = project.DEVELOPER_ID
                        name = project.DEVELOPER_NAME
                        email = project.DEVELOPER_EMAIL
                    }
                }

                scm {
                    connection = project.SCM_CONNECTION
                    developerConnection = project.SCM_DEV_CONNECTION
                    url = project.SCM_URL
                }
            }
        }
    }
}

signing {
    if (project.hasProperty('signingKey') && project.signingKey) {
        useInMemoryPgpKeys(project.signingKeyId, project.signingKey, project.signingPassword)
        sign publishing.publications
    }
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = project.sonatypeStagingProfileId
            username = project.ossrhUsername
            password = project.ossrhPassword
        }
    }
}

