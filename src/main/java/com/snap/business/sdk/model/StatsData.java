/*
 * Snap Conversions API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.snap.business.sdk.model;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.snap.business.sdk.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** StatsData */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class StatsData {
    public static final String SERIALIZED_NAME_TEST = "test";

    @SerializedName(SERIALIZED_NAME_TEST)
    private StatsResponse test;

    public static final String SERIALIZED_NAME_LIVE = "live";

    @SerializedName(SERIALIZED_NAME_LIVE)
    private StatsResponse live;

    public StatsData() {}

    public StatsData test(StatsResponse test) {
        this.test = test;
        return this;
    }

    /**
     * Get test
     *
     * @return test
     */
    @javax.annotation.Nullable
    public StatsResponse getTest() {
        return test;
    }

    public void setTest(StatsResponse test) {
        this.test = test;
    }

    public StatsData live(StatsResponse live) {
        this.live = live;
        return this;
    }

    /**
     * Get live
     *
     * @return live
     */
    @javax.annotation.Nullable
    public StatsResponse getLive() {
        return live;
    }

    public void setLive(StatsResponse live) {
        this.live = live;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StatsData statsData = (StatsData) o;
        return Objects.equals(this.test, statsData.test)
                && Objects.equals(this.live, statsData.live);
    }

    @Override
    public int hashCode() {
        return Objects.hash(test, live);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class StatsData {\n");
        sb.append("    test: ").append(toIndentedString(test)).append("\n");
        sb.append("    live: ").append(toIndentedString(live)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("test");
        openapiFields.add("live");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to StatsData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!StatsData.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in StatsData is not found in the empty"
                                        + " JSON string",
                                StatsData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!StatsData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `StatsData` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `test`
        if (jsonObj.get("test") != null && !jsonObj.get("test").isJsonNull()) {
            StatsResponse.validateJsonElement(jsonObj.get("test"));
        }
        // validate the optional field `live`
        if (jsonObj.get("live") != null && !jsonObj.get("live").isJsonNull()) {
            StatsResponse.validateJsonElement(jsonObj.get("live"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StatsData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StatsData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<StatsData> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(StatsData.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<StatsData>() {
                        @Override
                        public void write(JsonWriter out, StatsData value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public StatsData read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of StatsData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of StatsData
     * @throws IOException if the JSON string is invalid with respect to StatsData
     */
    public static StatsData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, StatsData.class);
    }

    /**
     * Convert an instance of StatsData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
