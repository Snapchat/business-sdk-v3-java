/*
 * Snap Conversions API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.snap.business.sdk.model;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.snap.business.sdk.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** ErrorDetails */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class ErrorDetails {
    public static final String SERIALIZED_NAME_CODES = "codes";

    @SerializedName(SERIALIZED_NAME_CODES)
    private List<String> codes;

    public static final String SERIALIZED_NAME_ERROR_MSGS = "error_msgs";

    @SerializedName(SERIALIZED_NAME_ERROR_MSGS)
    private List<String> errorMsgs;

    public ErrorDetails() {}

    public ErrorDetails codes(List<String> codes) {
        this.codes = codes;
        return this;
    }

    public ErrorDetails addCodesItem(String codesItem) {
        if (this.codes == null) {
            this.codes = new ArrayList<>();
        }
        this.codes.add(codesItem);
        return this;
    }

    /**
     * Error codes associated with the errors.
     *
     * @return codes
     */
    @javax.annotation.Nullable
    public List<String> getCodes() {
        return codes;
    }

    public void setCodes(List<String> codes) {
        this.codes = codes;
    }

    public ErrorDetails errorMsgs(List<String> errorMsgs) {
        this.errorMsgs = errorMsgs;
        return this;
    }

    public ErrorDetails addErrorMsgsItem(String errorMsgsItem) {
        if (this.errorMsgs == null) {
            this.errorMsgs = new ArrayList<>();
        }
        this.errorMsgs.add(errorMsgsItem);
        return this;
    }

    /**
     * Error messages detailing the reasons for the error.
     *
     * @return errorMsgs
     */
    @javax.annotation.Nullable
    public List<String> getErrorMsgs() {
        return errorMsgs;
    }

    public void setErrorMsgs(List<String> errorMsgs) {
        this.errorMsgs = errorMsgs;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorDetails errorDetails = (ErrorDetails) o;
        return Objects.equals(this.codes, errorDetails.codes)
                && Objects.equals(this.errorMsgs, errorDetails.errorMsgs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(codes, errorMsgs);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ErrorDetails {\n");
        sb.append("    codes: ").append(toIndentedString(codes)).append("\n");
        sb.append("    errorMsgs: ").append(toIndentedString(errorMsgs)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("codes");
        openapiFields.add("error_msgs");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ErrorDetails
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ErrorDetails.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ErrorDetails is not found in the"
                                        + " empty JSON string",
                                ErrorDetails.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ErrorDetails.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ErrorDetails` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("codes") != null
                && !jsonObj.get("codes").isJsonNull()
                && !jsonObj.get("codes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `codes` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("codes").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("error_msgs") != null
                && !jsonObj.get("error_msgs").isJsonNull()
                && !jsonObj.get("error_msgs").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `error_msgs` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("error_msgs").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ErrorDetails.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ErrorDetails' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ErrorDetails> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ErrorDetails.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ErrorDetails>() {
                        @Override
                        public void write(JsonWriter out, ErrorDetails value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ErrorDetails read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ErrorDetails given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ErrorDetails
     * @throws IOException if the JSON string is invalid with respect to ErrorDetails
     */
    public static ErrorDetails fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ErrorDetails.class);
    }

    /**
     * Convert an instance of ErrorDetails to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
