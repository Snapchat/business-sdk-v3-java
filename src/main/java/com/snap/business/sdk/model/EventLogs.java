/*
 * Snap Conversions API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.snap.business.sdk.model;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.snap.business.sdk.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** EventLogs */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class EventLogs {
    public static final String SERIALIZED_NAME_EVENT = "event";

    @SerializedName(SERIALIZED_NAME_EVENT)
    private Integer event;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;

    public static final String SERIALIZED_NAME_ERRORS = "errors";

    @SerializedName(SERIALIZED_NAME_ERRORS)
    private ErrorDetails errors;

    public static final String SERIALIZED_NAME_WARNINGS = "warnings";

    @SerializedName(SERIALIZED_NAME_WARNINGS)
    private List<String> warnings;

    public EventLogs() {}

    public EventLogs event(Integer event) {
        this.event = event;
        return this;
    }

    /**
     * Get event
     *
     * @return event
     */
    @javax.annotation.Nullable
    public Integer getEvent() {
        return event;
    }

    public void setEvent(Integer event) {
        this.event = event;
    }

    public EventLogs status(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public EventLogs errors(ErrorDetails errors) {
        this.errors = errors;
        return this;
    }

    /**
     * Get errors
     *
     * @return errors
     */
    @javax.annotation.Nullable
    public ErrorDetails getErrors() {
        return errors;
    }

    public void setErrors(ErrorDetails errors) {
        this.errors = errors;
    }

    public EventLogs warnings(List<String> warnings) {
        this.warnings = warnings;
        return this;
    }

    public EventLogs addWarningsItem(String warningsItem) {
        if (this.warnings == null) {
            this.warnings = new ArrayList<>();
        }
        this.warnings.add(warningsItem);
        return this;
    }

    /**
     * Get warnings
     *
     * @return warnings
     */
    @javax.annotation.Nullable
    public List<String> getWarnings() {
        return warnings;
    }

    public void setWarnings(List<String> warnings) {
        this.warnings = warnings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EventLogs eventLogs = (EventLogs) o;
        return Objects.equals(this.event, eventLogs.event)
                && Objects.equals(this.status, eventLogs.status)
                && Objects.equals(this.errors, eventLogs.errors)
                && Objects.equals(this.warnings, eventLogs.warnings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(event, status, errors, warnings);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EventLogs {\n");
        sb.append("    event: ").append(toIndentedString(event)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
        sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("event");
        openapiFields.add("status");
        openapiFields.add("errors");
        openapiFields.add("warnings");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EventLogs
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EventLogs.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in EventLogs is not found in the empty"
                                        + " JSON string",
                                EventLogs.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EventLogs.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `EventLogs` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        // validate the optional field `errors`
        if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
            ErrorDetails.validateJsonElement(jsonObj.get("errors"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("warnings") != null
                && !jsonObj.get("warnings").isJsonNull()
                && !jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `warnings` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("warnings").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EventLogs.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EventLogs' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EventLogs> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(EventLogs.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EventLogs>() {
                        @Override
                        public void write(JsonWriter out, EventLogs value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EventLogs read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EventLogs given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EventLogs
     * @throws IOException if the JSON string is invalid with respect to EventLogs
     */
    public static EventLogs fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EventLogs.class);
    }

    /**
     * Convert an instance of EventLogs to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
