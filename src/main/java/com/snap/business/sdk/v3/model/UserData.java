/*
 * Snap Conversions API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.snap.business.sdk.v3.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.snap.business.sdk.v3.JSON;

/**
 * UserData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UserData {
  public static final String SERIALIZED_NAME_EM = "em";
  @SerializedName(SERIALIZED_NAME_EM)
  @javax.annotation.Nullable
  private List<String> em = new ArrayList<>();

  public static final String SERIALIZED_NAME_PH = "ph";
  @SerializedName(SERIALIZED_NAME_PH)
  @javax.annotation.Nullable
  private List<String> ph = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOBILE_AD_ID = "mobile_ad_id";
  @SerializedName(SERIALIZED_NAME_MOBILE_AD_ID)
  @javax.annotation.Nullable
  private String mobileAdId;

  public static final String SERIALIZED_NAME_CLIENT_IP_ADDRESS = "client_ip_address";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP_ADDRESS)
  @javax.annotation.Nullable
  private String clientIpAddress;

  public static final String SERIALIZED_NAME_CLIENT_USER_AGENT = "client_user_agent";
  @SerializedName(SERIALIZED_NAME_CLIENT_USER_AGENT)
  @javax.annotation.Nullable
  private String clientUserAgent;

  public static final String SERIALIZED_NAME_CT = "ct";
  @SerializedName(SERIALIZED_NAME_CT)
  @javax.annotation.Nullable
  private List<String> ct = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private List<String> country = new ArrayList<>();

  public static final String SERIALIZED_NAME_FN = "fn";
  @SerializedName(SERIALIZED_NAME_FN)
  @javax.annotation.Nullable
  private List<String> fn = new ArrayList<>();

  public static final String SERIALIZED_NAME_GE = "ge";
  @SerializedName(SERIALIZED_NAME_GE)
  @javax.annotation.Nullable
  private List<String> ge = new ArrayList<>();

  public static final String SERIALIZED_NAME_LN = "ln";
  @SerializedName(SERIALIZED_NAME_LN)
  @javax.annotation.Nullable
  private List<String> ln = new ArrayList<>();

  public static final String SERIALIZED_NAME_ST = "st";
  @SerializedName(SERIALIZED_NAME_ST)
  @javax.annotation.Nullable
  private List<String> st = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZP = "zp";
  @SerializedName(SERIALIZED_NAME_ZP)
  @javax.annotation.Nullable
  private List<String> zp = new ArrayList<>();

  public static final String SERIALIZED_NAME_SC_CLICK_ID = "sc_click_id";
  @SerializedName(SERIALIZED_NAME_SC_CLICK_ID)
  @javax.annotation.Nullable
  private String scClickId;

  public static final String SERIALIZED_NAME_SC_COOKIE1 = "sc_cookie1";
  @SerializedName(SERIALIZED_NAME_SC_COOKIE1)
  @javax.annotation.Nullable
  private String scCookie1;

  public static final String SERIALIZED_NAME_IDFV = "idfv";
  @SerializedName(SERIALIZED_NAME_IDFV)
  @javax.annotation.Nullable
  private String idfv;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  @javax.annotation.Nullable
  private String subscriptionId;

  public static final String SERIALIZED_NAME_LEAD_ID = "lead_id";
  @SerializedName(SERIALIZED_NAME_LEAD_ID)
  @javax.annotation.Nullable
  private String leadId;

  public static final String SERIALIZED_NAME_ANON_ID = "anon_id";
  @SerializedName(SERIALIZED_NAME_ANON_ID)
  @javax.annotation.Nullable
  private List<String> anonId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOAD_ID = "download_id";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_ID)
  @javax.annotation.Nullable
  private String downloadId;

  public static final String SERIALIZED_NAME_PARTNER_ID = "partner_id";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  @javax.annotation.Nullable
  private String partnerId;

  public UserData() {
  }

  public UserData em(@javax.annotation.Nullable List<String> em) {
    this.em = em;
    return this;
  }

  public UserData addEmItem(String emItem) {
    if (this.em == null) {
      this.em = new ArrayList<>();
    }
    this.em.add(emItem);
    return this;
  }

  /**
   * Get em
   * @return em
   */
  @javax.annotation.Nullable
  public List<String> getEm() {
    return em;
  }

  public void setEm(@javax.annotation.Nullable List<String> em) {
    this.em = em;
  }


  public UserData ph(@javax.annotation.Nullable List<String> ph) {
    this.ph = ph;
    return this;
  }

  public UserData addPhItem(String phItem) {
    if (this.ph == null) {
      this.ph = new ArrayList<>();
    }
    this.ph.add(phItem);
    return this;
  }

  /**
   * Get ph
   * @return ph
   */
  @javax.annotation.Nullable
  public List<String> getPh() {
    return ph;
  }

  public void setPh(@javax.annotation.Nullable List<String> ph) {
    this.ph = ph;
  }


  public UserData mobileAdId(@javax.annotation.Nullable String mobileAdId) {
    this.mobileAdId = mobileAdId;
    return this;
  }

  /**
   * The mobile advertising ID of the user.
   * @return mobileAdId
   */
  @javax.annotation.Nullable
  public String getMobileAdId() {
    return mobileAdId;
  }

  public void setMobileAdId(@javax.annotation.Nullable String mobileAdId) {
    this.mobileAdId = mobileAdId;
  }


  public UserData clientIpAddress(@javax.annotation.Nullable String clientIpAddress) {
    this.clientIpAddress = clientIpAddress;
    return this;
  }

  /**
   * The IP address of the user.
   * @return clientIpAddress
   */
  @javax.annotation.Nullable
  public String getClientIpAddress() {
    return clientIpAddress;
  }

  public void setClientIpAddress(@javax.annotation.Nullable String clientIpAddress) {
    this.clientIpAddress = clientIpAddress;
  }


  public UserData clientUserAgent(@javax.annotation.Nullable String clientUserAgent) {
    this.clientUserAgent = clientUserAgent;
    return this;
  }

  /**
   * The user agent of the user.
   * @return clientUserAgent
   */
  @javax.annotation.Nullable
  public String getClientUserAgent() {
    return clientUserAgent;
  }

  public void setClientUserAgent(@javax.annotation.Nullable String clientUserAgent) {
    this.clientUserAgent = clientUserAgent;
  }


  public UserData ct(@javax.annotation.Nullable List<String> ct) {
    this.ct = ct;
    return this;
  }

  public UserData addCtItem(String ctItem) {
    if (this.ct == null) {
      this.ct = new ArrayList<>();
    }
    this.ct.add(ctItem);
    return this;
  }

  /**
   * Get ct
   * @return ct
   */
  @javax.annotation.Nullable
  public List<String> getCt() {
    return ct;
  }

  public void setCt(@javax.annotation.Nullable List<String> ct) {
    this.ct = ct;
  }


  public UserData country(@javax.annotation.Nullable List<String> country) {
    this.country = country;
    return this;
  }

  public UserData addCountryItem(String countryItem) {
    if (this.country == null) {
      this.country = new ArrayList<>();
    }
    this.country.add(countryItem);
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public List<String> getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable List<String> country) {
    this.country = country;
  }


  public UserData fn(@javax.annotation.Nullable List<String> fn) {
    this.fn = fn;
    return this;
  }

  public UserData addFnItem(String fnItem) {
    if (this.fn == null) {
      this.fn = new ArrayList<>();
    }
    this.fn.add(fnItem);
    return this;
  }

  /**
   * Get fn
   * @return fn
   */
  @javax.annotation.Nullable
  public List<String> getFn() {
    return fn;
  }

  public void setFn(@javax.annotation.Nullable List<String> fn) {
    this.fn = fn;
  }


  public UserData ge(@javax.annotation.Nullable List<String> ge) {
    this.ge = ge;
    return this;
  }

  public UserData addGeItem(String geItem) {
    if (this.ge == null) {
      this.ge = new ArrayList<>();
    }
    this.ge.add(geItem);
    return this;
  }

  /**
   * Get ge
   * @return ge
   */
  @javax.annotation.Nullable
  public List<String> getGe() {
    return ge;
  }

  public void setGe(@javax.annotation.Nullable List<String> ge) {
    this.ge = ge;
  }


  public UserData ln(@javax.annotation.Nullable List<String> ln) {
    this.ln = ln;
    return this;
  }

  public UserData addLnItem(String lnItem) {
    if (this.ln == null) {
      this.ln = new ArrayList<>();
    }
    this.ln.add(lnItem);
    return this;
  }

  /**
   * Get ln
   * @return ln
   */
  @javax.annotation.Nullable
  public List<String> getLn() {
    return ln;
  }

  public void setLn(@javax.annotation.Nullable List<String> ln) {
    this.ln = ln;
  }


  public UserData st(@javax.annotation.Nullable List<String> st) {
    this.st = st;
    return this;
  }

  public UserData addStItem(String stItem) {
    if (this.st == null) {
      this.st = new ArrayList<>();
    }
    this.st.add(stItem);
    return this;
  }

  /**
   * Get st
   * @return st
   */
  @javax.annotation.Nullable
  public List<String> getSt() {
    return st;
  }

  public void setSt(@javax.annotation.Nullable List<String> st) {
    this.st = st;
  }


  public UserData zp(@javax.annotation.Nullable List<String> zp) {
    this.zp = zp;
    return this;
  }

  public UserData addZpItem(String zpItem) {
    if (this.zp == null) {
      this.zp = new ArrayList<>();
    }
    this.zp.add(zpItem);
    return this;
  }

  /**
   * Get zp
   * @return zp
   */
  @javax.annotation.Nullable
  public List<String> getZp() {
    return zp;
  }

  public void setZp(@javax.annotation.Nullable List<String> zp) {
    this.zp = zp;
  }


  public UserData scClickId(@javax.annotation.Nullable String scClickId) {
    this.scClickId = scClickId;
    return this;
  }

  /**
   * The click ID of the user.
   * @return scClickId
   */
  @javax.annotation.Nullable
  public String getScClickId() {
    return scClickId;
  }

  public void setScClickId(@javax.annotation.Nullable String scClickId) {
    this.scClickId = scClickId;
  }


  public UserData scCookie1(@javax.annotation.Nullable String scCookie1) {
    this.scCookie1 = scCookie1;
    return this;
  }

  /**
   * The cookie 1 of the user.
   * @return scCookie1
   */
  @javax.annotation.Nullable
  public String getScCookie1() {
    return scCookie1;
  }

  public void setScCookie1(@javax.annotation.Nullable String scCookie1) {
    this.scCookie1 = scCookie1;
  }


  public UserData idfv(@javax.annotation.Nullable String idfv) {
    this.idfv = idfv;
    return this;
  }

  /**
   * Get idfv
   * @return idfv
   */
  @javax.annotation.Nullable
  public String getIdfv() {
    return idfv;
  }

  public void setIdfv(@javax.annotation.Nullable String idfv) {
    this.idfv = idfv;
  }


  public UserData externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * A unique ID such as a loyalty card ID, first party cookie identifier, or some other identifier.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public UserData subscriptionId(@javax.annotation.Nullable String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The subscription ID for the user who generated this event.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(@javax.annotation.Nullable String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public UserData leadId(@javax.annotation.Nullable String leadId) {
    this.leadId = leadId;
    return this;
  }

  /**
   * The ID associated with a Snapchat Lead Ad.
   * @return leadId
   */
  @javax.annotation.Nullable
  public String getLeadId() {
    return leadId;
  }

  public void setLeadId(@javax.annotation.Nullable String leadId) {
    this.leadId = leadId;
  }


  public UserData anonId(@javax.annotation.Nullable List<String> anonId) {
    this.anonId = anonId;
    return this;
  }

  public UserData addAnonIdItem(String anonIdItem) {
    if (this.anonId == null) {
      this.anonId = new ArrayList<>();
    }
    this.anonId.add(anonIdItem);
    return this;
  }

  /**
   * Get anonId
   * @return anonId
   */
  @javax.annotation.Nullable
  public List<String> getAnonId() {
    return anonId;
  }

  public void setAnonId(@javax.annotation.Nullable List<String> anonId) {
    this.anonId = anonId;
  }


  public UserData downloadId(@javax.annotation.Nullable String downloadId) {
    this.downloadId = downloadId;
    return this;
  }

  /**
   * The ID associated with an app download event.
   * @return downloadId
   */
  @javax.annotation.Nullable
  public String getDownloadId() {
    return downloadId;
  }

  public void setDownloadId(@javax.annotation.Nullable String downloadId) {
    this.downloadId = downloadId;
  }


  public UserData partnerId(@javax.annotation.Nullable String partnerId) {
    this.partnerId = partnerId;
    return this;
  }

  /**
   * The ID provided by a partner, allowlist only.
   * @return partnerId
   */
  @javax.annotation.Nullable
  public String getPartnerId() {
    return partnerId;
  }

  public void setPartnerId(@javax.annotation.Nullable String partnerId) {
    this.partnerId = partnerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserData userData = (UserData) o;
    return Objects.equals(this.em, userData.em) &&
        Objects.equals(this.ph, userData.ph) &&
        Objects.equals(this.mobileAdId, userData.mobileAdId) &&
        Objects.equals(this.clientIpAddress, userData.clientIpAddress) &&
        Objects.equals(this.clientUserAgent, userData.clientUserAgent) &&
        Objects.equals(this.ct, userData.ct) &&
        Objects.equals(this.country, userData.country) &&
        Objects.equals(this.fn, userData.fn) &&
        Objects.equals(this.ge, userData.ge) &&
        Objects.equals(this.ln, userData.ln) &&
        Objects.equals(this.st, userData.st) &&
        Objects.equals(this.zp, userData.zp) &&
        Objects.equals(this.scClickId, userData.scClickId) &&
        Objects.equals(this.scCookie1, userData.scCookie1) &&
        Objects.equals(this.idfv, userData.idfv) &&
        Objects.equals(this.externalId, userData.externalId) &&
        Objects.equals(this.subscriptionId, userData.subscriptionId) &&
        Objects.equals(this.leadId, userData.leadId) &&
        Objects.equals(this.anonId, userData.anonId) &&
        Objects.equals(this.downloadId, userData.downloadId) &&
        Objects.equals(this.partnerId, userData.partnerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(em, ph, mobileAdId, clientIpAddress, clientUserAgent, ct, country, fn, ge, ln, st, zp, scClickId, scCookie1, idfv, externalId, subscriptionId, leadId, anonId, downloadId, partnerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserData {\n");
    sb.append("    em: ").append(toIndentedString(em)).append("\n");
    sb.append("    ph: ").append(toIndentedString(ph)).append("\n");
    sb.append("    mobileAdId: ").append(toIndentedString(mobileAdId)).append("\n");
    sb.append("    clientIpAddress: ").append(toIndentedString(clientIpAddress)).append("\n");
    sb.append("    clientUserAgent: ").append(toIndentedString(clientUserAgent)).append("\n");
    sb.append("    ct: ").append(toIndentedString(ct)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    fn: ").append(toIndentedString(fn)).append("\n");
    sb.append("    ge: ").append(toIndentedString(ge)).append("\n");
    sb.append("    ln: ").append(toIndentedString(ln)).append("\n");
    sb.append("    st: ").append(toIndentedString(st)).append("\n");
    sb.append("    zp: ").append(toIndentedString(zp)).append("\n");
    sb.append("    scClickId: ").append(toIndentedString(scClickId)).append("\n");
    sb.append("    scCookie1: ").append(toIndentedString(scCookie1)).append("\n");
    sb.append("    idfv: ").append(toIndentedString(idfv)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    leadId: ").append(toIndentedString(leadId)).append("\n");
    sb.append("    anonId: ").append(toIndentedString(anonId)).append("\n");
    sb.append("    downloadId: ").append(toIndentedString(downloadId)).append("\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("em");
    openapiFields.add("ph");
    openapiFields.add("mobile_ad_id");
    openapiFields.add("client_ip_address");
    openapiFields.add("client_user_agent");
    openapiFields.add("ct");
    openapiFields.add("country");
    openapiFields.add("fn");
    openapiFields.add("ge");
    openapiFields.add("ln");
    openapiFields.add("st");
    openapiFields.add("zp");
    openapiFields.add("sc_click_id");
    openapiFields.add("sc_cookie1");
    openapiFields.add("idfv");
    openapiFields.add("external_id");
    openapiFields.add("subscription_id");
    openapiFields.add("lead_id");
    openapiFields.add("anon_id");
    openapiFields.add("download_id");
    openapiFields.add("partner_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserData is not found in the empty JSON string", UserData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("em") != null && !jsonObj.get("em").isJsonNull() && !jsonObj.get("em").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `em` to be an array in the JSON string but got `%s`", jsonObj.get("em").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ph") != null && !jsonObj.get("ph").isJsonNull() && !jsonObj.get("ph").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ph` to be an array in the JSON string but got `%s`", jsonObj.get("ph").toString()));
      }
      if ((jsonObj.get("mobile_ad_id") != null && !jsonObj.get("mobile_ad_id").isJsonNull()) && !jsonObj.get("mobile_ad_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_ad_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_ad_id").toString()));
      }
      if ((jsonObj.get("client_ip_address") != null && !jsonObj.get("client_ip_address").isJsonNull()) && !jsonObj.get("client_ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip_address").toString()));
      }
      if ((jsonObj.get("client_user_agent") != null && !jsonObj.get("client_user_agent").isJsonNull()) && !jsonObj.get("client_user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_user_agent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ct") != null && !jsonObj.get("ct").isJsonNull() && !jsonObj.get("ct").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ct` to be an array in the JSON string but got `%s`", jsonObj.get("ct").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull() && !jsonObj.get("country").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be an array in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fn") != null && !jsonObj.get("fn").isJsonNull() && !jsonObj.get("fn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fn` to be an array in the JSON string but got `%s`", jsonObj.get("fn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ge") != null && !jsonObj.get("ge").isJsonNull() && !jsonObj.get("ge").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ge` to be an array in the JSON string but got `%s`", jsonObj.get("ge").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ln") != null && !jsonObj.get("ln").isJsonNull() && !jsonObj.get("ln").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ln` to be an array in the JSON string but got `%s`", jsonObj.get("ln").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("st") != null && !jsonObj.get("st").isJsonNull() && !jsonObj.get("st").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `st` to be an array in the JSON string but got `%s`", jsonObj.get("st").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("zp") != null && !jsonObj.get("zp").isJsonNull() && !jsonObj.get("zp").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zp` to be an array in the JSON string but got `%s`", jsonObj.get("zp").toString()));
      }
      if ((jsonObj.get("sc_click_id") != null && !jsonObj.get("sc_click_id").isJsonNull()) && !jsonObj.get("sc_click_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sc_click_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sc_click_id").toString()));
      }
      if ((jsonObj.get("sc_cookie1") != null && !jsonObj.get("sc_cookie1").isJsonNull()) && !jsonObj.get("sc_cookie1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sc_cookie1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sc_cookie1").toString()));
      }
      if ((jsonObj.get("idfv") != null && !jsonObj.get("idfv").isJsonNull()) && !jsonObj.get("idfv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idfv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idfv").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if ((jsonObj.get("subscription_id") != null && !jsonObj.get("subscription_id").isJsonNull()) && !jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      if ((jsonObj.get("lead_id") != null && !jsonObj.get("lead_id").isJsonNull()) && !jsonObj.get("lead_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lead_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lead_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anon_id") != null && !jsonObj.get("anon_id").isJsonNull() && !jsonObj.get("anon_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anon_id` to be an array in the JSON string but got `%s`", jsonObj.get("anon_id").toString()));
      }
      if ((jsonObj.get("download_id") != null && !jsonObj.get("download_id").isJsonNull()) && !jsonObj.get("download_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_id").toString()));
      }
      if ((jsonObj.get("partner_id") != null && !jsonObj.get("partner_id").isJsonNull()) && !jsonObj.get("partner_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partner_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partner_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserData.class));

       return (TypeAdapter<T>) new TypeAdapter<UserData>() {
           @Override
           public void write(JsonWriter out, UserData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserData
   * @throws IOException if the JSON string is invalid with respect to UserData
   */
  public static UserData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserData.class);
  }

  /**
   * Convert an instance of UserData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

