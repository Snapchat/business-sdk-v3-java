/*
 * Snap Conversions API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.snap.business.sdk.v3.model;


import java.util.Objects;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.snap.business.sdk.v3.JSON;
import com.snap.business.sdk.v3.model.AppData;
import com.snap.business.sdk.v3.model.CustomData;
import com.snap.business.sdk.v3.model.UserData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** CapiEvent */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class CapiEvent {
    public static final String SERIALIZED_NAME_EVENT_NAME = "event_name";

    @SerializedName(SERIALIZED_NAME_EVENT_NAME)
    private String eventName;

    public static final String SERIALIZED_NAME_EVENT_TIME = "event_time";

    @SerializedName(SERIALIZED_NAME_EVENT_TIME)
    private Long eventTime;

    public static final String SERIALIZED_NAME_ACTION_SOURCE = "action_source";

    @SerializedName(SERIALIZED_NAME_ACTION_SOURCE)
    private String actionSource;

    public static final String SERIALIZED_NAME_EVENT_ID = "event_id";

    @SerializedName(SERIALIZED_NAME_EVENT_ID)
    private String eventId;

    public static final String SERIALIZED_NAME_EVENT_SOURCE_URL = "event_source_url";

    @SerializedName(SERIALIZED_NAME_EVENT_SOURCE_URL)
    private String eventSourceUrl;

    public static final String SERIALIZED_NAME_OPT_OUT = "opt_out";

    @SerializedName(SERIALIZED_NAME_OPT_OUT)
    private Boolean optOut;

    public static final String SERIALIZED_NAME_DATA_PROCESSING_OPTIONS = "data_processing_options";

    @SerializedName(SERIALIZED_NAME_DATA_PROCESSING_OPTIONS)
    private List<String> dataProcessingOptions;

    public static final String SERIALIZED_NAME_USER_DATA = "user_data";

    @SerializedName(SERIALIZED_NAME_USER_DATA)
    private UserData userData;

    public static final String SERIALIZED_NAME_CUSTOM_DATA = "custom_data";

    @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
    private CustomData customData;

    public static final String SERIALIZED_NAME_RAW_REQUEST = "raw_request";

    @SerializedName(SERIALIZED_NAME_RAW_REQUEST)
    private String rawRequest;

    public static final String SERIALIZED_NAME_APP_DATA = "app_data";

    @SerializedName(SERIALIZED_NAME_APP_DATA)
    private AppData appData;

    public static final String SERIALIZED_NAME_ASSET_ID = "asset_id";

    @SerializedName(SERIALIZED_NAME_ASSET_ID)
    private String assetId;

    public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";

    @SerializedName(SERIALIZED_NAME_REQUEST_ID)
    private String requestId;

    public static final String SERIALIZED_NAME_INTEGRATION = "integration";

    @SerializedName(SERIALIZED_NAME_INTEGRATION)
    private String integration = "business-sdk-v3";

    public static final String SERIALIZED_NAME_TEST_EVENT_CODE = "test_event_code";

    @SerializedName(SERIALIZED_NAME_TEST_EVENT_CODE)
    private String testEventCode;

    public CapiEvent() {}

    public CapiEvent eventName(String eventName) {
        this.eventName = eventName;
        return this;
    }

    /**
     * Get eventName
     *
     * @return eventName
     */
    @javax.annotation.Nullable
    public String getEventName() {
        return eventName;
    }

    public void setEventName(String eventName) {
        this.eventName = eventName;
    }

    public CapiEvent eventTime(Long eventTime) {
        this.eventTime = eventTime;
        return this;
    }

    /**
     * Get eventTime
     *
     * @return eventTime
     */
    @javax.annotation.Nullable
    public Long getEventTime() {
        return eventTime;
    }

    public void setEventTime(Long eventTime) {
        this.eventTime = eventTime;
    }

    public CapiEvent actionSource(String actionSource) {
        this.actionSource = actionSource;
        return this;
    }

    /**
     * Get actionSource
     *
     * @return actionSource
     */
    @javax.annotation.Nullable
    public String getActionSource() {
        return actionSource;
    }

    public void setActionSource(String actionSource) {
        this.actionSource = actionSource;
    }

    public CapiEvent eventId(String eventId) {
        this.eventId = eventId;
        return this;
    }

    /**
     * Get eventId
     *
     * @return eventId
     */
    @javax.annotation.Nullable
    public String getEventId() {
        return eventId;
    }

    public void setEventId(String eventId) {
        this.eventId = eventId;
    }

    public CapiEvent eventSourceUrl(String eventSourceUrl) {
        this.eventSourceUrl = eventSourceUrl;
        return this;
    }

    /**
     * Get eventSourceUrl
     *
     * @return eventSourceUrl
     */
    @javax.annotation.Nullable
    public String getEventSourceUrl() {
        return eventSourceUrl;
    }

    public void setEventSourceUrl(String eventSourceUrl) {
        this.eventSourceUrl = eventSourceUrl;
    }

    public CapiEvent optOut(Boolean optOut) {
        this.optOut = optOut;
        return this;
    }

    /**
     * Get optOut
     *
     * @return optOut
     */
    @javax.annotation.Nullable
    public Boolean getOptOut() {
        return optOut;
    }

    public void setOptOut(Boolean optOut) {
        this.optOut = optOut;
    }

    public CapiEvent dataProcessingOptions(List<String> dataProcessingOptions) {
        this.dataProcessingOptions = dataProcessingOptions;
        return this;
    }

    public CapiEvent addDataProcessingOptionsItem(String dataProcessingOptionsItem) {
        if (this.dataProcessingOptions == null) {
            this.dataProcessingOptions = new ArrayList<>();
        }
        this.dataProcessingOptions.add(dataProcessingOptionsItem);
        return this;
    }

    /**
     * Get dataProcessingOptions
     *
     * @return dataProcessingOptions
     */
    @javax.annotation.Nullable
    public List<String> getDataProcessingOptions() {
        return dataProcessingOptions;
    }

    public void setDataProcessingOptions(List<String> dataProcessingOptions) {
        this.dataProcessingOptions = dataProcessingOptions;
    }

    public CapiEvent userData(UserData userData) {
        this.userData = userData;
        return this;
    }

    /**
     * Get userData
     *
     * @return userData
     */
    @javax.annotation.Nullable
    public UserData getUserData() {
        return userData;
    }

    public void setUserData(UserData userData) {
        this.userData = userData;
    }

    public CapiEvent customData(CustomData customData) {
        this.customData = customData;
        return this;
    }

    /**
     * Get customData
     *
     * @return customData
     */
    @javax.annotation.Nullable
    public CustomData getCustomData() {
        return customData;
    }

    public void setCustomData(CustomData customData) {
        this.customData = customData;
    }

    public CapiEvent rawRequest(String rawRequest) {
        this.rawRequest = rawRequest;
        return this;
    }

    /**
     * Get rawRequest
     *
     * @return rawRequest
     */
    @javax.annotation.Nullable
    public String getRawRequest() {
        return rawRequest;
    }

    public void setRawRequest(String rawRequest) {
        this.rawRequest = rawRequest;
    }

    public CapiEvent appData(AppData appData) {
        this.appData = appData;
        return this;
    }

    /**
     * Get appData
     *
     * @return appData
     */
    @javax.annotation.Nullable
    public AppData getAppData() {
        return appData;
    }

    public void setAppData(AppData appData) {
        this.appData = appData;
    }

    public CapiEvent assetId(String assetId) {
        this.assetId = assetId;
        return this;
    }

    /**
     * Get assetId
     *
     * @return assetId
     */
    @javax.annotation.Nullable
    public String getAssetId() {
        return assetId;
    }

    public void setAssetId(String assetId) {
        this.assetId = assetId;
    }

    public CapiEvent requestId(String requestId) {
        this.requestId = requestId;
        return this;
    }

    /**
     * Get requestId
     *
     * @return requestId
     */
    @javax.annotation.Nullable
    public String getRequestId() {
        return requestId;
    }

    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    public CapiEvent integration(String integration) {
        this.integration = integration;
        return this;
    }

    /**
     * Get integration
     *
     * @return integration
     */
    @javax.annotation.Nullable
    public String getIntegration() {
        return integration;
    }

    public void setIntegration(String integration) {
        this.integration = integration;
    }

    public CapiEvent testEventCode(String testEventCode) {
        this.testEventCode = testEventCode;
        return this;
    }

    /**
     * Get testEventCode
     * @return testEventCode
     */
    @javax.annotation.Nullable
    public String getTestEventCode() {
        return testEventCode;
    }

    public void setTestEventCode(String testEventCode) {
        this.testEventCode = testEventCode;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CapiEvent capiEvent = (CapiEvent) o;
        return Objects.equals(this.eventName, capiEvent.eventName)
                && Objects.equals(this.eventTime, capiEvent.eventTime)
                && Objects.equals(this.actionSource, capiEvent.actionSource)
                && Objects.equals(this.eventId, capiEvent.eventId)
                && Objects.equals(this.eventSourceUrl, capiEvent.eventSourceUrl)
                && Objects.equals(this.optOut, capiEvent.optOut)
                && Objects.equals(this.dataProcessingOptions, capiEvent.dataProcessingOptions)
                && Objects.equals(this.userData, capiEvent.userData)
                && Objects.equals(this.customData, capiEvent.customData)
                && Objects.equals(this.rawRequest, capiEvent.rawRequest)
                && Objects.equals(this.appData, capiEvent.appData)
                && Objects.equals(this.assetId, capiEvent.assetId)
                && Objects.equals(this.requestId, capiEvent.requestId)
                && Objects.equals(this.integration, capiEvent.integration)
                && Objects.equals(this.testEventCode, capiEvent.testEventCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                eventName,
                eventTime,
                actionSource,
                eventId,
                eventSourceUrl,
                optOut,
                dataProcessingOptions,
                userData,
                customData,
                rawRequest,
                appData,
                assetId,
                requestId,
                integration,
                testEventCode);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CapiEvent {\n");
        sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
        sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
        sb.append("    actionSource: ").append(toIndentedString(actionSource)).append("\n");
        sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
        sb.append("    eventSourceUrl: ").append(toIndentedString(eventSourceUrl)).append("\n");
        sb.append("    optOut: ").append(toIndentedString(optOut)).append("\n");
        sb.append("    dataProcessingOptions: ")
                .append(toIndentedString(dataProcessingOptions))
                .append("\n");
        sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
        sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
        sb.append("    rawRequest: ").append(toIndentedString(rawRequest)).append("\n");
        sb.append("    appData: ").append(toIndentedString(appData)).append("\n");
        sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
        sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
        sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
        sb.append("    testEventCode: ").append(toIndentedString(testEventCode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("event_name");
        openapiFields.add("event_time");
        openapiFields.add("action_source");
        openapiFields.add("event_id");
        openapiFields.add("event_source_url");
        openapiFields.add("opt_out");
        openapiFields.add("data_processing_options");
        openapiFields.add("user_data");
        openapiFields.add("custom_data");
        openapiFields.add("raw_request");
        openapiFields.add("app_data");
        openapiFields.add("asset_id");
        openapiFields.add("request_id");
        openapiFields.add("integration");
        openapiFields.add("test_event_code");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CapiEvent
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CapiEvent.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CapiEvent is not found in the empty"
                                        + " JSON string",
                                CapiEvent.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CapiEvent.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CapiEvent` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("event_name") != null && !jsonObj.get("event_name").isJsonNull())
                && !jsonObj.get("event_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `event_name` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("event_name").toString()));
        }
        if ((jsonObj.get("action_source") != null && !jsonObj.get("action_source").isJsonNull())
                && !jsonObj.get("action_source").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `action_source` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("action_source").toString()));
        }
        if ((jsonObj.get("event_id") != null && !jsonObj.get("event_id").isJsonNull())
                && !jsonObj.get("event_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `event_id` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("event_id").toString()));
        }
        if ((jsonObj.get("event_source_url") != null
                        && !jsonObj.get("event_source_url").isJsonNull())
                && !jsonObj.get("event_source_url").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `event_source_url` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("event_source_url").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("data_processing_options") != null
                && !jsonObj.get("data_processing_options").isJsonNull()
                && !jsonObj.get("data_processing_options").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `data_processing_options` to be an array in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("data_processing_options").toString()));
        }
        // validate the optional field `user_data`
        if (jsonObj.get("user_data") != null && !jsonObj.get("user_data").isJsonNull()) {
            UserData.validateJsonElement(jsonObj.get("user_data"));
        }
        // validate the optional field `custom_data`
        if (jsonObj.get("custom_data") != null && !jsonObj.get("custom_data").isJsonNull()) {
            CustomData.validateJsonElement(jsonObj.get("custom_data"));
        }
        if ((jsonObj.get("raw_request") != null && !jsonObj.get("raw_request").isJsonNull())
                && !jsonObj.get("raw_request").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `raw_request` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("raw_request").toString()));
        }
        // validate the optional field `app_data`
        if (jsonObj.get("app_data") != null && !jsonObj.get("app_data").isJsonNull()) {
            AppData.validateJsonElement(jsonObj.get("app_data"));
        }
        if ((jsonObj.get("asset_id") != null && !jsonObj.get("asset_id").isJsonNull())
                && !jsonObj.get("asset_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset_id` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("asset_id").toString()));
        }
        if ((jsonObj.get("request_id") != null && !jsonObj.get("request_id").isJsonNull())
                && !jsonObj.get("request_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `request_id` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("request_id").toString()));
        }
        if ((jsonObj.get("integration") != null && !jsonObj.get("integration").isJsonNull())
                && !jsonObj.get("integration").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `integration` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("integration").toString()));
        }
        if ((jsonObj.get("test_event_code") != null && !jsonObj.get("test_event_code").isJsonNull()) && !jsonObj.get("test_event_code").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format("Expected the field `test_event_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test_event_code").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CapiEvent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CapiEvent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CapiEvent> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CapiEvent.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CapiEvent>() {
                        @Override
                        public void write(JsonWriter out, CapiEvent value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CapiEvent read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CapiEvent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CapiEvent
     * @throws IOException if the JSON string is invalid with respect to CapiEvent
     */
    public static CapiEvent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CapiEvent.class);
    }

    /**
     * Convert an instance of CapiEvent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
