/*
 * Snap Conversions API V3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.snap.business.sdk.v3.model;


import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.snap.business.sdk.v3.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** ValidateEvent */
@javax.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.4.0")
public class ValidateEvent {
    public static final String SERIALIZED_NAME_EVENT_NAME = "event_name";

    @SerializedName(SERIALIZED_NAME_EVENT_NAME)
    private String eventName;

    public static final String SERIALIZED_NAME_EVENT_TIME = "event_time";

    @SerializedName(SERIALIZED_NAME_EVENT_TIME)
    private String eventTime;

    public static final String SERIALIZED_NAME_ACTION_SOURCE = "action_source";

    @SerializedName(SERIALIZED_NAME_ACTION_SOURCE)
    private String actionSource;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    private String status;

    public static final String SERIALIZED_NAME_INTEGRATION = "integration";

    @SerializedName(SERIALIZED_NAME_INTEGRATION)
    private String integration;

    public static final String SERIALIZED_NAME_EVENT_METADATA = "event_metadata";

    @SerializedName(SERIALIZED_NAME_EVENT_METADATA)
    private EventMetadata eventMetadata;

    public static final String SERIALIZED_NAME_WARNING_RECORDS = "warning_records";

    @SerializedName(SERIALIZED_NAME_WARNING_RECORDS)
    private List<String> warningRecords;

    public static final String SERIALIZED_NAME_ASSET_ID = "asset_id";

    @SerializedName(SERIALIZED_NAME_ASSET_ID)
    private String assetId;

    public static final String SERIALIZED_NAME_RAW_EVENT_NAME = "raw_event_name";

    @SerializedName(SERIALIZED_NAME_RAW_EVENT_NAME)
    private String rawEventName;

    public static final String SERIALIZED_NAME_ERROR_RECORDS = "error_records";

    @SerializedName(SERIALIZED_NAME_ERROR_RECORDS)
    private List<String> errorRecords;

    public ValidateEvent() {}

    public ValidateEvent eventName(String eventName) {
        this.eventName = eventName;
        return this;
    }

    /**
     * Get eventName
     *
     * @return eventName
     */
    @javax.annotation.Nullable
    public String getEventName() {
        return eventName;
    }

    public void setEventName(String eventName) {
        this.eventName = eventName;
    }

    public ValidateEvent eventTime(String eventTime) {
        this.eventTime = eventTime;
        return this;
    }

    /**
     * Get eventTime
     *
     * @return eventTime
     */
    @javax.annotation.Nullable
    public String getEventTime() {
        return eventTime;
    }

    public void setEventTime(String eventTime) {
        this.eventTime = eventTime;
    }

    public ValidateEvent actionSource(String actionSource) {
        this.actionSource = actionSource;
        return this;
    }

    /**
     * Get actionSource
     *
     * @return actionSource
     */
    @javax.annotation.Nullable
    public String getActionSource() {
        return actionSource;
    }

    public void setActionSource(String actionSource) {
        this.actionSource = actionSource;
    }

    public ValidateEvent status(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @javax.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public ValidateEvent integration(String integration) {
        this.integration = integration;
        return this;
    }

    /**
     * Get integration
     *
     * @return integration
     */
    @javax.annotation.Nullable
    public String getIntegration() {
        return integration;
    }

    public void setIntegration(String integration) {
        this.integration = integration;
    }

    public ValidateEvent eventMetadata(EventMetadata eventMetadata) {
        this.eventMetadata = eventMetadata;
        return this;
    }

    /**
     * Get eventMetadata
     *
     * @return eventMetadata
     */
    @javax.annotation.Nullable
    public EventMetadata getEventMetadata() {
        return eventMetadata;
    }

    public void setEventMetadata(EventMetadata eventMetadata) {
        this.eventMetadata = eventMetadata;
    }

    public ValidateEvent warningRecords(List<String> warningRecords) {
        this.warningRecords = warningRecords;
        return this;
    }

    public ValidateEvent addWarningRecordsItem(String warningRecordsItem) {
        if (this.warningRecords == null) {
            this.warningRecords = new ArrayList<>();
        }
        this.warningRecords.add(warningRecordsItem);
        return this;
    }

    /**
     * Get warningRecords
     *
     * @return warningRecords
     */
    @javax.annotation.Nullable
    public List<String> getWarningRecords() {
        return warningRecords;
    }

    public void setWarningRecords(List<String> warningRecords) {
        this.warningRecords = warningRecords;
    }

    public ValidateEvent assetId(String assetId) {
        this.assetId = assetId;
        return this;
    }

    /**
     * Get assetId
     *
     * @return assetId
     */
    @javax.annotation.Nullable
    public String getAssetId() {
        return assetId;
    }

    public void setAssetId(String assetId) {
        this.assetId = assetId;
    }

    public ValidateEvent rawEventName(String rawEventName) {
        this.rawEventName = rawEventName;
        return this;
    }

    /**
     * Get rawEventName
     *
     * @return rawEventName
     */
    @javax.annotation.Nullable
    public String getRawEventName() {
        return rawEventName;
    }

    public void setRawEventName(String rawEventName) {
        this.rawEventName = rawEventName;
    }

    public ValidateEvent errorRecords(List<String> errorRecords) {
        this.errorRecords = errorRecords;
        return this;
    }

    public ValidateEvent addErrorRecordsItem(String errorRecordsItem) {
        if (this.errorRecords == null) {
            this.errorRecords = new ArrayList<>();
        }
        this.errorRecords.add(errorRecordsItem);
        return this;
    }

    /**
     * Get errorRecords
     *
     * @return errorRecords
     */
    @javax.annotation.Nullable
    public List<String> getErrorRecords() {
        return errorRecords;
    }

    public void setErrorRecords(List<String> errorRecords) {
        this.errorRecords = errorRecords;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ValidateEvent validateEvent = (ValidateEvent) o;
        return Objects.equals(this.eventName, validateEvent.eventName)
                && Objects.equals(this.eventTime, validateEvent.eventTime)
                && Objects.equals(this.actionSource, validateEvent.actionSource)
                && Objects.equals(this.status, validateEvent.status)
                && Objects.equals(this.integration, validateEvent.integration)
                && Objects.equals(this.eventMetadata, validateEvent.eventMetadata)
                && Objects.equals(this.warningRecords, validateEvent.warningRecords)
                && Objects.equals(this.assetId, validateEvent.assetId)
                && Objects.equals(this.rawEventName, validateEvent.rawEventName)
                && Objects.equals(this.errorRecords, validateEvent.errorRecords);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                eventName,
                eventTime,
                actionSource,
                status,
                integration,
                eventMetadata,
                warningRecords,
                assetId,
                rawEventName,
                errorRecords);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ValidateEvent {\n");
        sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
        sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
        sb.append("    actionSource: ").append(toIndentedString(actionSource)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
        sb.append("    eventMetadata: ").append(toIndentedString(eventMetadata)).append("\n");
        sb.append("    warningRecords: ").append(toIndentedString(warningRecords)).append("\n");
        sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
        sb.append("    rawEventName: ").append(toIndentedString(rawEventName)).append("\n");
        sb.append("    errorRecords: ").append(toIndentedString(errorRecords)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("event_name");
        openapiFields.add("event_time");
        openapiFields.add("action_source");
        openapiFields.add("status");
        openapiFields.add("integration");
        openapiFields.add("event_metadata");
        openapiFields.add("warning_records");
        openapiFields.add("asset_id");
        openapiFields.add("raw_event_name");
        openapiFields.add("error_records");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ValidateEvent
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ValidateEvent.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ValidateEvent is not found in the"
                                        + " empty JSON string",
                                ValidateEvent.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ValidateEvent.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ValidateEvent` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("event_name") != null && !jsonObj.get("event_name").isJsonNull())
                && !jsonObj.get("event_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `event_name` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("event_name").toString()));
        }
        if ((jsonObj.get("event_time") != null && !jsonObj.get("event_time").isJsonNull())
                && !jsonObj.get("event_time").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `event_time` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("event_time").toString()));
        }
        if ((jsonObj.get("action_source") != null && !jsonObj.get("action_source").isJsonNull())
                && !jsonObj.get("action_source").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `action_source` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("action_source").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("integration") != null && !jsonObj.get("integration").isJsonNull())
                && !jsonObj.get("integration").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `integration` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("integration").toString()));
        }
        // validate the optional field `event_metadata`
        if (jsonObj.get("event_metadata") != null && !jsonObj.get("event_metadata").isJsonNull()) {
            EventMetadata.validateJsonElement(jsonObj.get("event_metadata"));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("warning_records") != null
                && !jsonObj.get("warning_records").isJsonNull()
                && !jsonObj.get("warning_records").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `warning_records` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("warning_records").toString()));
        }
        if ((jsonObj.get("asset_id") != null && !jsonObj.get("asset_id").isJsonNull())
                && !jsonObj.get("asset_id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset_id` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("asset_id").toString()));
        }
        if ((jsonObj.get("raw_event_name") != null && !jsonObj.get("raw_event_name").isJsonNull())
                && !jsonObj.get("raw_event_name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `raw_event_name` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("raw_event_name").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("error_records") != null
                && !jsonObj.get("error_records").isJsonNull()
                && !jsonObj.get("error_records").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `error_records` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("error_records").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ValidateEvent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ValidateEvent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ValidateEvent> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ValidateEvent.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ValidateEvent>() {
                        @Override
                        public void write(JsonWriter out, ValidateEvent value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ValidateEvent read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ValidateEvent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ValidateEvent
     * @throws IOException if the JSON string is invalid with respect to ValidateEvent
     */
    public static ValidateEvent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ValidateEvent.class);
    }

    /**
     * Convert an instance of ValidateEvent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
